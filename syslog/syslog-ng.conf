#############################################################################
# Default syslog-ng.conf file which collects all local logs into a
# single file called /var/log/messages tailored to container usage.
#
# The changes from the stock, default syslog-ng.conf file is that we've
# dropped the system() source that is not needed and that we enabled network
# connections using default-network-drivers(). Customize as needed and
# override using the -v option to docker, such as:
#
#  docker run ...  -v "$PWD/syslog-ng.conf":/etc/syslog-ng/syslog-ng.conf
#

@version: 4.4
@include "scl.conf"

options { flush_lines(0); perm(0777); threaded(yes); owner("root"); group("adm");
	perm(0777); create_dirs(yes); dir_perm(0750);
};


#source s_local {
##        system();
#	internal();
#};

#source s_network {
#        default-network-drivers(
                # NOTE: TLS support
                #
                # the default-network-drivers() source driver opens the TLS
                # enabled ports as well, however without an actual key/cert
                # pair they will not operate and syslog-ng would display a
                # warning at startup.
                #
                #tls(key-file("/path/to/ssl-private-key") cert-file("/path/to/ssl-cert"))
#        );
#};

#destination d_local {
#        file("/var/log/messages");
#        file("/var/log/messages-kv.log" template("$ISODATE $HOST $(format-welf --scope all-nv-pairs)\n") frac-digits(3));
#};

#log {
#        source(s_local);
        #source(s_network);
#        destination(d_local);
#};

##########################

source src{
    system();
    internal();

    udp(ip("0.0.0.0") port(514));
    tcp(ip("0.0.0.0") port(514));

};

filter f_hote {
    netmask("172.18.0.1/32");
};

destination d_hote {
    file("/var/log/hote.log"
    create-dirs(yes) dir-perm(0777) dir-group(root) dir-owner(root) suppress(30) owner(root) group(root));
};

log {
    source(src); 
    filter(f_hote);
    destination(d_hote);
};

##########"

filter f_nginx1 {
    netmask("172.18.0.2/32");
};

destination d_nginx1 {
    file("/var/log/nginx1.log"
    create-dirs(yes) dir-perm(0777) dir-group(root) dir-owner(root) suppress(30) owner(root) group(root));
};

log {
    source(src); 
    filter(f_nginx1);
    destination(d_nginx1);
};

###########

filter f_nginx2 {
    netmask("172.18.0.3/32");
};

destination d_nginx2 {
    file("/var/log/nginx2.log"
    create-dirs(yes) dir-perm(0777) dir-group(root) dir-owner(root) suppress(30) owner(root) group(root));
};

log {
    source(src); 
    filter(f_nginx2);
    destination(d_nginx2);
};

#############

filter f_haproxy {
    netmask("172.18.0.253/32");
};

destination d_haproxy {
    file("/var/log/haproxy.log"
    create-dirs(yes) dir-perm(0777) dir-group(root) dir-owner(root) suppress(30) owner(root) group(root));
};

log {
    source(src); 
    filter(f_haproxy);
    destination(d_haproxy);
};

##############

filter f_mysql {
    netmask("172.18.0.5/32");
};

destination d_mysql {
    file("/var/log/mysql.log"
    create-dirs(yes) dir-perm(0777) dir-group(root) dir-owner(root) suppress(30) owner(root) group(root));
};

log {
    source(src); 
    filter(f_mysql);
    destination(d_mysql);
};

#############

filter f_php {
    netmask("172.18.0.6/32");
};

destination d_php {
    file("/var/log/php.log"
    create-dirs(yes) dir-perm(0777) dir-group(root) dir-owner(root) suppress(30) owner(root) group(root));
};

log {
    source(src); 
    filter(f_php);
    destination(d_php);
};

#############

filter f_syslog {
    netmask("172.18.0.7/32");
};

destination d_syslog {
    file("/var/log/syslog.log"
    create-dirs(yes) dir-perm(0777) dir-group(root) dir-owner(root) suppress(30) owner(root) group(root));
};

log {
    source(src); 
    filter(f_syslog);
    destination(d_syslog);
};


